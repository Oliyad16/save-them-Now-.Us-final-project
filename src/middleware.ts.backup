import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// Define rate limits for different endpoints
const RATE_LIMITS = {
  '/api/auth/register': { windowMinutes: 60, maxRequests: 5 }, // 5 registrations per hour
  '/api/donations': { windowMinutes: 60, maxRequests: 10 }, // 10 donation attempts per hour
  '/api/missing-persons': { windowMinutes: 60, maxRequests: 100 }, // 100 data requests per hour
  '/api/ai-chat': { windowMinutes: 60, maxRequests: 20 }, // 20 AI interactions per hour
  default: { windowMinutes: 60, maxRequests: 60 } // General API limit
}

// Public routes that don't require authentication
const PUBLIC_ROUTES = [
  '/',
  '/about',
  '/analysis',
  '/auth/signin',
  '/auth/signup',
  '/auth/error',
  '/auth/verify-request',
  '/donate',
  '/api/auth/',
  '/api/missing-persons',
  '/api/geocode'
]

// Routes that require authentication
const PROTECTED_ROUTES = [
  '/dashboard',
  '/profile',
  '/api/subscriptions',
  '/api/donations'
]

// Admin routes (future use)
const ADMIN_ROUTES = [
  '/admin'
]

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl
  const ip = request.ip || request.headers.get('x-forwarded-for') || 'unknown'
  
  // Skip middleware for static files and internal Next.js routes
  if (
    pathname.startsWith('/_next/') ||
    pathname.startsWith('/static/') ||
    pathname.includes('.') ||
    pathname.startsWith('/api/auth/') // Skip NextAuth API routes
  ) {
    return NextResponse.next()
  }

  // Simple rate limiting for registration endpoint only
  if (pathname === '/api/auth/register') {
    // Basic IP-based rate limiting (simplified for edge runtime)
    const rateLimitKey = `rate_limit_${ip}`
    
    // For now, just add security headers and continue
    // TODO: Implement Redis-based rate limiting for production
  }

  // Check for protected routes (simplified - no token checking in middleware)
  if (PROTECTED_ROUTES.some(route => pathname.startsWith(route))) {
    // We'll handle auth checking in the actual page components instead
    // This avoids OAuth initialization issues in middleware
  }

  // Security headers
  const response = NextResponse.next()
  
  // Security headers for all routes
  response.headers.set('X-Content-Type-Options', 'nosniff')
  response.headers.set('X-Frame-Options', 'DENY')
  response.headers.set('X-XSS-Protection', '1; mode=block')
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  
  // CSP for enhanced security (adjust as needed)
  const csp = [
    "default-src 'self'",
    "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.stripe.com https://maps.googleapis.com",
    "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com",
    "font-src 'self' https://fonts.gstatic.com",
    "img-src 'self' data: https: blob:",
    "connect-src 'self' https://api.stripe.com https://maps.googleapis.com wss: ws:",
    "frame-src https://js.stripe.com",
    "object-src 'none'",
    "base-uri 'self'"
  ].join('; ')
  
  response.headers.set('Content-Security-Policy', csp)

  return response
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
}