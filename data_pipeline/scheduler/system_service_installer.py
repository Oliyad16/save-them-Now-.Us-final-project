"""
System service installer for automated scheduler.
Creates Windows Task Scheduler tasks or Linux systemd services.
"""

import os
import sys
import platform
import subprocess
import json
from pathlib import Path
from typing import Dict, Any, Optional

from ..utils.logger import get_logger

logger = get_logger("service_installer")

class SystemServiceInstaller:
    """Install and manage system services for the automated scheduler."""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.service_name = config.get('service_name', 'savethemnow-scheduler')
        self.service_description = config.get('service_description', 'SaveThemNow.Jesus Missing Persons Data Scheduler')
        self.python_executable = sys.executable
        self.script_path = Path(__file__).parent / 'automated_scheduler.py'
        self.working_directory = Path(__file__).parent.parent.parent
        self.system = platform.system().lower()
        
    def install_service(self) -> bool:
        """Install the service for the current operating system."""
        logger.logger.info(f"Installing service for {self.system}")
        
        try:\n            if self.system == 'windows':\n                return self.install_windows_task()\n            elif self.system == 'linux':\n                return self.install_systemd_service()\n            elif self.system == 'darwin':  # macOS\n                return self.install_launchd_service()\n            else:\n                logger.logger.error(f\"Unsupported operating system: {self.system}\")\n                return False\n                \n        except Exception as e:\n            logger.logger.error(f\"Failed to install service: {e}\")\n            return False\n    \n    def install_windows_task(self) -> bool:\n        \"\"\"Install Windows Task Scheduler task.\"\"\"\n        logger.logger.info(\"Installing Windows Task Scheduler task\")\n        \n        # Create task XML configuration\n        task_xml = self.generate_windows_task_xml()\n        \n        # Write task XML to temporary file\n        task_file = Path.cwd() / f\"{self.service_name}.xml\"\n        \n        try:\n            with open(task_file, 'w', encoding='utf-8') as f:\n                f.write(task_xml)\n            \n            # Create the scheduled task\n            cmd = [\n                'schtasks', '/Create',\n                '/TN', self.service_name,\n                '/XML', str(task_file),\n                '/F'  # Force overwrite if exists\n            ]\n            \n            result = subprocess.run(cmd, capture_output=True, text=True, check=True)\n            \n            # Clean up temporary file\n            task_file.unlink()\n            \n            logger.logger.info(f\"Windows task created successfully: {self.service_name}\")\n            return True\n            \n        except subprocess.CalledProcessError as e:\n            logger.logger.error(f\"Failed to create Windows task: {e.stderr}\")\n            if task_file.exists():\n                task_file.unlink()\n            return False\n        except Exception as e:\n            logger.logger.error(f\"Error creating Windows task: {e}\")\n            if task_file.exists():\n                task_file.unlink()\n            return False\n    \n    def generate_windows_task_xml(self) -> str:\n        \"\"\"Generate Windows Task Scheduler XML configuration.\"\"\"\n        return f\"\"\"<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n<Task version=\"1.4\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n  <RegistrationInfo>\n    <Description>{self.service_description}</Description>\n  </RegistrationInfo>\n  <Triggers>\n    <TimeTrigger>\n      <StartBoundary>2025-01-01T00:00:00</StartBoundary>\n      <Enabled>true</Enabled>\n      <Repetition>\n        <Interval>PT15M</Interval>\n        <StopAtDurationEnd>false</StopAtDurationEnd>\n      </Repetition>\n    </TimeTrigger>\n  </Triggers>\n  <Principals>\n    <Principal id=\"Author\">\n      <LogonType>InteractiveToken</LogonType>\n      <RunLevel>LeastPrivilege</RunLevel>\n    </Principal>\n  </Principals>\n  <Settings>\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n    <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>\n    <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>\n    <AllowHardTerminate>true</AllowHardTerminate>\n    <StartWhenAvailable>true</StartWhenAvailable>\n    <RunOnlyIfNetworkAvailable>true</RunOnlyIfNetworkAvailable>\n    <IdleSettings>\n      <StopOnIdleEnd>false</StopOnIdleEnd>\n      <RestartOnIdle>false</RestartOnIdle>\n    </IdleSettings>\n    <AllowStartOnDemand>true</AllowStartOnDemand>\n    <Enabled>true</Enabled>\n    <Hidden>false</Hidden>\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\n    <DisallowStartOnRemoteAppSession>false</DisallowStartOnRemoteAppSession>\n    <UseUnifiedSchedulingEngine>true</UseUnifiedSchedulingEngine>\n    <WakeToRun>false</WakeToRun>\n    <ExecutionTimeLimit>PT2H</ExecutionTimeLimit>\n    <Priority>6</Priority>\n    <RestartOnFailure>\n      <Interval>PT5M</Interval>\n      <Count>3</Count>\n    </RestartOnFailure>\n  </Settings>\n  <Actions Context=\"Author\">\n    <Exec>\n      <Command>{self.python_executable}</Command>\n      <Arguments>{self.script_path} --daemon</Arguments>\n      <WorkingDirectory>{self.working_directory}</WorkingDirectory>\n    </Exec>\n  </Actions>\n</Task>\"\"\"\n    \n    def install_systemd_service(self) -> bool:\n        \"\"\"Install systemd service for Linux.\"\"\"\n        logger.logger.info(\"Installing systemd service\")\n        \n        service_content = self.generate_systemd_service()\n        service_file = Path(f\"/etc/systemd/system/{self.service_name}.service\")\n        \n        try:\n            # Write service file (requires sudo)\n            with open(service_file, 'w') as f:\n                f.write(service_content)\n            \n            # Reload systemd and enable service\n            subprocess.run(['systemctl', 'daemon-reload'], check=True)\n            subprocess.run(['systemctl', 'enable', self.service_name], check=True)\n            \n            logger.logger.info(f\"Systemd service installed: {self.service_name}\")\n            return True\n            \n        except PermissionError:\n            logger.logger.error(\"Permission denied: Run as administrator/sudo to install system service\")\n            return False\n        except subprocess.CalledProcessError as e:\n            logger.logger.error(f\"Failed to install systemd service: {e}\")\n            return False\n        except Exception as e:\n            logger.logger.error(f\"Error installing systemd service: {e}\")\n            return False\n    \n    def generate_systemd_service(self) -> str:\n        \"\"\"Generate systemd service file content.\"\"\"\n        return f\"\"\"[Unit]\nDescription={self.service_description}\nAfter=network.target\nWants=network-online.target\n\n[Service]\nType=simple\nUser=nobody\nWorkingDirectory={self.working_directory}\nExecStart={self.python_executable} {self.script_path} --daemon\nRestart=always\nRestartSec=10\nStandardOutput=journal\nStandardError=journal\nSyslogIdentifier={self.service_name}\n\n[Install]\nWantedBy=multi-user.target\n\"\"\"\n    \n    def install_launchd_service(self) -> bool:\n        \"\"\"Install launchd service for macOS.\"\"\"\n        logger.logger.info(\"Installing launchd service\")\n        \n        plist_content = self.generate_launchd_plist()\n        plist_file = Path(f\"/Library/LaunchDaemons/com.savethemnow.{self.service_name}.plist\")\n        \n        try:\n            with open(plist_file, 'w') as f:\n                f.write(plist_content)\n            \n            # Load the service\n            subprocess.run(['launchctl', 'load', str(plist_file)], check=True)\n            \n            logger.logger.info(f\"Launchd service installed: {plist_file}\")\n            return True\n            \n        except PermissionError:\n            logger.logger.error(\"Permission denied: Run as administrator to install system service\")\n            return False\n        except subprocess.CalledProcessError as e:\n            logger.logger.error(f\"Failed to install launchd service: {e}\")\n            return False\n        except Exception as e:\n            logger.logger.error(f\"Error installing launchd service: {e}\")\n            return False\n    \n    def generate_launchd_plist(self) -> str:\n        \"\"\"Generate launchd plist file content.\"\"\"\n        return f\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>com.savethemnow.{self.service_name}</string>\n    <key>ProgramArguments</key>\n    <array>\n        <string>{self.python_executable}</string>\n        <string>{self.script_path}</string>\n        <string>--daemon</string>\n    </array>\n    <key>WorkingDirectory</key>\n    <string>{self.working_directory}</string>\n    <key>RunAtLoad</key>\n    <true/>\n    <key>KeepAlive</key>\n    <true/>\n    <key>StandardOutPath</key>\n    <string>/var/log/{self.service_name}.log</string>\n    <key>StandardErrorPath</key>\n    <string>/var/log/{self.service_name}.error.log</string>\n</dict>\n</plist>\n\"\"\"\n    \n    def uninstall_service(self) -> bool:\n        \"\"\"Uninstall the service from the current operating system.\"\"\"\n        logger.logger.info(f\"Uninstalling service for {self.system}\")\n        \n        try:\n            if self.system == 'windows':\n                return self.uninstall_windows_task()\n            elif self.system == 'linux':\n                return self.uninstall_systemd_service()\n            elif self.system == 'darwin':\n                return self.uninstall_launchd_service()\n            else:\n                logger.logger.error(f\"Unsupported operating system: {self.system}\")\n                return False\n                \n        except Exception as e:\n            logger.logger.error(f\"Failed to uninstall service: {e}\")\n            return False\n    \n    def uninstall_windows_task(self) -> bool:\n        \"\"\"Uninstall Windows Task Scheduler task.\"\"\"\n        try:\n            cmd = ['schtasks', '/Delete', '/TN', self.service_name, '/F']\n            subprocess.run(cmd, capture_output=True, text=True, check=True)\n            logger.logger.info(f\"Windows task uninstalled: {self.service_name}\")\n            return True\n        except subprocess.CalledProcessError as e:\n            logger.logger.error(f\"Failed to uninstall Windows task: {e.stderr}\")\n            return False\n    \n    def uninstall_systemd_service(self) -> bool:\n        \"\"\"Uninstall systemd service.\"\"\"\n        try:\n            subprocess.run(['systemctl', 'stop', self.service_name], check=False)\n            subprocess.run(['systemctl', 'disable', self.service_name], check=True)\n            \n            service_file = Path(f\"/etc/systemd/system/{self.service_name}.service\")\n            if service_file.exists():\n                service_file.unlink()\n            \n            subprocess.run(['systemctl', 'daemon-reload'], check=True)\n            logger.logger.info(f\"Systemd service uninstalled: {self.service_name}\")\n            return True\n        except subprocess.CalledProcessError as e:\n            logger.logger.error(f\"Failed to uninstall systemd service: {e}\")\n            return False\n    \n    def uninstall_launchd_service(self) -> bool:\n        \"\"\"Uninstall launchd service.\"\"\"\n        try:\n            plist_file = Path(f\"/Library/LaunchDaemons/com.savethemnow.{self.service_name}.plist\")\n            \n            if plist_file.exists():\n                subprocess.run(['launchctl', 'unload', str(plist_file)], check=False)\n                plist_file.unlink()\n            \n            logger.logger.info(f\"Launchd service uninstalled: {self.service_name}\")\n            return True\n        except Exception as e:\n            logger.logger.error(f\"Failed to uninstall launchd service: {e}\")\n            return False\n    \n    def start_service(self) -> bool:\n        \"\"\"Start the installed service.\"\"\"\n        try:\n            if self.system == 'windows':\n                cmd = ['schtasks', '/Run', '/TN', self.service_name]\n                subprocess.run(cmd, check=True)\n            elif self.system == 'linux':\n                subprocess.run(['systemctl', 'start', self.service_name], check=True)\n            elif self.system == 'darwin':\n                subprocess.run(['launchctl', 'start', f'com.savethemnow.{self.service_name}'], check=True)\n            \n            logger.logger.info(f\"Service started: {self.service_name}\")\n            return True\n        except subprocess.CalledProcessError as e:\n            logger.logger.error(f\"Failed to start service: {e}\")\n            return False\n    \n    def stop_service(self) -> bool:\n        \"\"\"Stop the running service.\"\"\"\n        try:\n            if self.system == 'windows':\n                cmd = ['schtasks', '/End', '/TN', self.service_name]\n                subprocess.run(cmd, check=True)\n            elif self.system == 'linux':\n                subprocess.run(['systemctl', 'stop', self.service_name], check=True)\n            elif self.system == 'darwin':\n                subprocess.run(['launchctl', 'stop', f'com.savethemnow.{self.service_name}'], check=True)\n            \n            logger.logger.info(f\"Service stopped: {self.service_name}\")\n            return True\n        except subprocess.CalledProcessError as e:\n            logger.logger.error(f\"Failed to stop service: {e}\")\n            return False\n    \n    def get_service_status(self) -> Dict[str, Any]:\n        \"\"\"Get the current status of the service.\"\"\"\n        try:\n            if self.system == 'windows':\n                cmd = ['schtasks', '/Query', '/TN', self.service_name, '/FO', 'CSV']\n                result = subprocess.run(cmd, capture_output=True, text=True)\n                return {\n                    'installed': result.returncode == 0,\n                    'running': 'Running' in result.stdout if result.returncode == 0 else False,\n                    'details': result.stdout if result.returncode == 0 else result.stderr\n                }\n            elif self.system == 'linux':\n                result = subprocess.run(['systemctl', 'is-active', self.service_name], \n                                      capture_output=True, text=True)\n                return {\n                    'installed': True,\n                    'running': result.stdout.strip() == 'active',\n                    'status': result.stdout.strip()\n                }\n            elif self.system == 'darwin':\n                result = subprocess.run(['launchctl', 'list', f'com.savethemnow.{self.service_name}'], \n                                      capture_output=True, text=True)\n                return {\n                    'installed': result.returncode == 0,\n                    'running': result.returncode == 0,\n                    'details': result.stdout\n                }\n        except Exception as e:\n            logger.logger.error(f\"Error checking service status: {e}\")\n        \n        return {'installed': False, 'running': False, 'error': 'Unknown'}\n\ndef main():\n    \"\"\"CLI entry point for service management.\"\"\"\n    import argparse\n    \n    parser = argparse.ArgumentParser(description=\"System Service Installer for SaveThemNow Scheduler\")\n    parser.add_argument('action', choices=['install', 'uninstall', 'start', 'stop', 'status'], \n                       help='Action to perform')\n    parser.add_argument('--name', default='savethemnow-scheduler', help='Service name')\n    parser.add_argument('--description', default='SaveThemNow.Jesus Missing Persons Data Scheduler', \n                       help='Service description')\n    \n    args = parser.parse_args()\n    \n    config = {\n        'service_name': args.name,\n        'service_description': args.description\n    }\n    \n    installer = SystemServiceInstaller(config)\n    \n    if args.action == 'install':\n        success = installer.install_service()\n        if success:\n            print(f\"Service '{args.name}' installed successfully\")\n        else:\n            print(f\"Failed to install service '{args.name}'\")\n            sys.exit(1)\n    \n    elif args.action == 'uninstall':\n        success = installer.uninstall_service()\n        if success:\n            print(f\"Service '{args.name}' uninstalled successfully\")\n        else:\n            print(f\"Failed to uninstall service '{args.name}'\")\n            sys.exit(1)\n    \n    elif args.action == 'start':\n        success = installer.start_service()\n        if success:\n            print(f\"Service '{args.name}' started successfully\")\n        else:\n            print(f\"Failed to start service '{args.name}'\")\n            sys.exit(1)\n    \n    elif args.action == 'stop':\n        success = installer.stop_service()\n        if success:\n            print(f\"Service '{args.name}' stopped successfully\")\n        else:\n            print(f\"Failed to stop service '{args.name}'\")\n            sys.exit(1)\n    \n    elif args.action == 'status':\n        status = installer.get_service_status()\n        print(f\"Service Status for '{args.name}':\")\n        print(json.dumps(status, indent=2))\n\nif __name__ == '__main__':\n    main()